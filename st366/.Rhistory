z <- (x - mu) / beta
(1 / beta) * exp(-(z+exp(-z)))
}
seq(-1, 1)
dgumbel(seq(-1, 1), 0.5, -1)
# (b)
dgumbel2 <- function(x, mu=0, beta=1)
# (b)
dgumbel2 <- function(x, mu=0, beta=1)
dgumbel(x, mu, beta)
# Q2
# (a)
dgumbel <- function(x, beta, mu) {
z <- (x - mu) / beta
return((1 / beta) * exp(-(z+exp(-z))))
}
dgumbel(seq(-1, 1), 0.5, -1)
# (b)
dgumbel2 <- function(x, mu=0, beta=1)
return(dgumbel(x, mu, beta))
stop()
stop("hi")
?stop
# (c)
dgumbel3 <- function(x, mu = 0, beta = 1) {
if (beta <= 0) {
stop("beta must be greater than zero")
}
z <- (x - mu) / beta
return((1 / beta) * exp(-(z + exp(-z))))
}
dgumbel3(5,2,0)
# (d)
## (i)
x <- seq(-5, 20, 0.01)
x
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
sg1
dg1
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3()
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(x~dg1)
## (v)
plot(dg1~x)
## (v)
plot(dg1~x, ylim=c(0,0.2), col="red")
lines(dg3, col="blue")
## (vi)
lines(dg2, col="green")
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), col="red")
## (vi)
lines(dg2, col="green")
lines(dg3, col="blue")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
sum(dg1)
## (v)
plot(dg1~x, ylim=c(0,0.2), col="red")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
## (v)
plot(dg1~x, ylim=c(0,0.2), col="red")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab = "Density")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
# (c)
dgumbel3 <- function(x, mu = 0, beta = 1) {
if (beta <= 0) {
return(stop("beta must be greater than zero"))
}
z <- (x - mu) / beta
return((1 / beta) * exp(-(z + exp(-z))))
}
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab = "Density")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
return((1 / beta) * exp(-1 * (z + exp(-1 * z))))
# (c)
dgumbel3 <- function(x, mu = 0, beta = 1) {
if (beta <= 0) {
return(stop("beta must be greater than zero"))
}
z <- (x - mu) / beta
return((1 / beta) * exp(-1 * (z + exp(-1 * z))))
}
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab = "Density")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
# (c)
dgumbel3 <- function(x, mu = 0, beta = 1) {
if (beta <= 0) {
return(stop("beta must be greater than zero"))
}
z <- (x - mu) / beta
return((1 / beta) * exp(-(z + exp(-z))))
}
View(dgumbel)
## (ii)
dg1 <- dgumbel(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab = "Density")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
## (ii)
dg1 <- dgumbel(x, beta=4, mu=2)
install.packages("gumbel")
library("gumbel")
## (ii)
dg1 <- dgumbel(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel(x, beta=2, mu=1)
## (ii)
dg1 <- dgumbel(x, 4, 2)
# (d)
## (i)
x <- seq(-5, 20, 0.01)
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel(x, 2, 4)
## (ii)
dg1 <- dgumbel(x, 4, 2)
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab)
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
# (c)
dgumbel3 <- function(x, mu = 0, beta = 1) {
if (beta <= 0) {
return(stop("beta must be greater than zero"))
}
z <- (x - mu) / beta
return((1 / beta) * exp(-(z + exp(-z))))
}
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab)
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
for(i in 1:19) N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
N
N
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
for(i in 1:19) {
print(N)
N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
}
N <- rep(NA, 20)
count(N)
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
while(sum(is.na(N)) != 20) {
print(N)
N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
}
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
while(sum(is.na(N)) != 0) {
print(N)
N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
}
N
i <- sum(!is.na(N))
i
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
while(sum(is.na(N)) != 0) {
print(N)
i <- sum(!is.na(N))
N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
}
N
# Q3
# (a)
N <- rep(NA, 20)
r <- 2.5
K <- 25
N[1] <- 6
for(i in 1:19) N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
N
# (b)
Ricker <- function(N1, r, K, time) {
N <- rep(NA, time)
N[1] <- N1
while(sum(is.na(N)) != 0) {
i <- sum(!is.na(N))
N[i+1] <- N[i] * exp(r * (1 - N[i]/K))
}
return(N)
}
# (c)
Ricker(6, 2.5, 25, 20)
# (c)
plot(Ricker(6, 2.5, 25, 20))
# (c)
plot(Ricker(6, 2.5, 25, 20), type="l")
# (c)
plot(Ricker(6, 2.5, 25, 20), type="l", col="red")
# (c)
plot(Ricker(6, 2.5, 25, 20), type="l", col="red", ylab="Ricker value")
# (c)
plot(Ricker(6, 2.5, 25, 20), type="l", col="red", ylab="Ricker value", xlab="Time")
plot(, type="l", col="red", ylab="Ricker value", xlab="Time", ylim=c(min(c(r1,r2,r3)), max(r1, r2, r3)))
plot(r1, type="l", col="red", ylab="Ricker value", xlab="Time", ylim=c(min(c(r1,r2,r3)), max(r1, r2, r3)))
# (c)
r1 <- Ricker(6, 2.5, 25, 20)
r2 <- Ricker(6, 3, 25, 20)
r3 <- Ricker(6, 3.5, 25, 20)
plot(r1, type="l", col="red", ylab="Ricker value", xlab="Time", ylim=c(min(c(r1,r2,r3)), max(r1, r2, r3)))
lines(r2, col="blue")
lines(r3, col="green")
plot(r1, type="l", col="red", ylab="Ricker value", xlab="Time", ylim=c(min(c(r1,r2,r3)), max(r1, r2, r3)))
lines(r2, col="blue", lwd=0.5)
lines(r3, col="green", lwd=0.25)
# (c)
r1 <- Ricker(6, 2.5, 25, 20)
r2 <- Ricker(6, 3, 25, 20)
r3 <- Ricker(6, 3.5, 25, 20)
plot(r1, type="l", col="red", ylab="Ricker value", xlab="Time", ylim=c(min(c(r1,r2,r3)), max(r1, r2, r3)))
lines(r2, col="blue", lwd=0.75)
lines(r3, col="green", lwd=0.5)
N < 6
r <- 2.5
K <- 25
for(i in 1:19) N[i+1] <- c(N, N[i] * exp(r * (1 - N[i]/K)))
N
warnings()
# (d)
## (i)
x <- seq(-5, 20, 0.01)
## (ii)
dg1 <- dgumbel3(x, beta=4, mu=2)
## (iii)
dg2 <- dgumbel3(x, beta=2, mu=1)
## (iv)
dg3 <- dgumbel3(x)
## (v)
plot(dg1~x, ylim=c(0,0.2), type="l", col="red", ylab="Densities")
## (vi)
lines(dg2~x, col="green")
lines(dg3~x, col="blue")
a <- 5
N[2]
N[5]
N
N[5] <- 2
N
# Q3
# (a)
fib <- function (n) {
if (n <= 2)
tail(c(1, 1), n = n)
else {
prev <- fib(n - 1)
c(prev, sum(tail(prev, n = 2)))
}
}
fib(80)
fib(200)
fib(2000)
fib(500)
fib(550)
fib(750)
fib(850)
fib(950)
fib(980)
fib(999)
fib(1000)
fib(2000)
fib(1500)
fib(1500)
fib(1800)
fib(1900)
fib(1950)
fib(1990)
fib(1980)
fib(1970)
fib(1960)
fib(1968)
fib(1965)
fib(1966)
fib(1967)
fib(1968)
fib(1967)
fib(1968)
fib(1969)
source('~/st366/R Midterm.R')
# Ciarán Ó hAoláin - 17309103
# Q1
## (a)
loan <- function (amount, interest, repayment) {
if (amount < 0) {
return(c(amount))
} else {
return(c(amount, loan(
amount * (1 + interest / 12) - repayment, interest, repayment
)))
}
}
loan_balances <- loan(1000, .11, 12)
length(loan(1000, .11, 12)) - 1
# 159 months
## (b)
plot(loan_balances, xlab = "Month", ylab = "Amount Owed")
## (c)
total_paid <- (158 * 12) + 2.246233 * (1 + .11 / 12)
total_paid - 1000
# 898.27 paid in interest
# Q2
## (a)
eupop <-
read.table("~/st366/eupop.txt", header = TRUE, row.names = 1)
sapply(eupop, mean)
# p014        p1544       p4564       p65.      pop
# 17.70000    43.10000    23.78000    15.45333  25030.52000
# This mean doesn't consider the size of each country's population.
# Ireland shouldn't have as much influence on the mean as Germany,due to
# the difference in proportion of the total EU population they represent.
## (b)
weighted_populations <-
sapply(eupop[,-5], weighted.mean, w = eupop$pop)
weighted_populations
# p014      p1544     p4564     p65.
# 17.00021  42.98610  23.99481  16.05757
## (c)
sum(weighted_populations)
# 100.0387
## (d)
lowest_row_nums <- apply(eupop[-5], c(2), which.min)
rownames(eupop[-5])[lowest_row_nums]
# p014      p1544       p4564       p65.
# "Italy"   "Sweden"    "Ireland"   "Ireland"
# Q3
## (a)
x <- rnorm(100, mean = 3, sd = 5)
g <- rep(1:20, each = 5)
y <- tapply(x, g, mean)
## (b)
alt_y <- numeric(20)
for (i in 1:20) {
alt_y[i] <- mean(x[(1 + (i - 1) * 5):(5 + (i - 1) * 5)])
}
all.equal(as.numeric(y), alt_y)
# TRUE
## (c)
index <- seq(2.5, 97.5, length = 20)
plot(index,
y,
ylim = range(x) * 1.1,
type = "o",
col = "red")
points(x, cex = .8, pch = 21, bg = "lightgray")
## (d)
ul <- 3 + 1.96 * 5 # 12.8
ll <- 3 - 1.96 * 5 # -6.8
abline(h = ul, lty = 2)
abline(h = ll, lty = 2)
abline(h = 3, lty = 2)
## (e)
is_outlier <- function(x)
x > ul | x < ll
outliers <- Filter(is_outlier, x)
## (f)
outlier_indices <- which(sapply(X = x, FUN = is_outlier))
points(outlier_indices, x[outlier_indices], pch = 21, bg = 4)
## (g)
test0 <- function(x, ll, ul)
which(sapply(
X = x,
FUN = function(x)
x > ul | x < ll
))
## (h)
test0(x, ll, ul)
# Q4
jump <- function(x) {
max(abs(diff(x)))
}
jump(x)
# Q5
A <- matrix(rep(0:4, each = 5) + seq(5), nrow = 5)
henkel <- function(n)
matrix(rep(0:(n - 1), each = n) + seq(n), nrow = n)
henkel(10)
henkel(12)
# Q6
## (a)
X <- matrix(sapply(
X = 1:4,
FUN = function(x)
c(x, x ^ 2)
), ncol = 2)
X
## (b)
A <- t(X) %*% X
A
# 22  84
# 84  362
A_inv <- solve(A)
A_inv
# 0.39867841    -0.09251101
# -0.09251101   0.02422907
all.equal(crossprod(A, A_inv), diag(2))
# TRUE, meaning the cross product is the identity
# Showing that the matrix multiplied by its inverse is the identity
## (c)
B <- X %*% t(X)
# 10   28   14   52
# 28   82   38  148
# 14   38   20   72
# 52  148   72  272
B_inv <- solve(B)
# error, as expected, since:
all.equal(det(B), 0)
# The determinant being 0 means the matrix is not invertable.
